name: 'AWS Edge Static Stack'
description: 'Deploy your static website to the AWS Edge using S3, CloudFront & Lambda@Edge'
author: 'Richard Willis <willis.rh@gmail.com>'
branding:
  icon: 'upload-cloud'
  color: 'gray-dark'
inputs:
  cfStackName:
    required: true
    description: 'The name of the Cloudformation stack to be created. For example: example-com-static-cloudformation-stack'
  cfTemplate:
    required: true
    description: 'The relative path to the CloudFormation stack template. For example: ./cloudformation/s3bucket_with_cloudfront.yml'
  cfApplyChangeSet:
    required: true
    description: 'Whether to apply the CloudFormation ChangeSet (if any)'
  gitHubToken:
    required: true
    description: 'GitHub Token used for commenting on Pull Requests. Use the default GITHUB_TOKEN from secrets.'
  awsRegion:
    require: true
    description: 'The AWS region in which to create the stack. You should set this to: us-east-1'
  s3BucketName:
    required: true
    description: 'The name of S3 bucket to be created, to store your static files. Must end with region name, for example: example.com-us-east-1'
  s3AllowedOrigins:
    required: true
    description: 'A list of allowed domains to request resources from S3. For example: https://example.com,https://*.preview.example.com'
  cloudFrontRootHosts:
    required: true
    description: 'A list of hosts assigned to the Root CloudFront distribution. For example: example.com'
  cloudFrontPreviewHosts:
    required: true
    description: 'A list of hosts assigned to the Preview CloudFront distribution. For example: *.preview.example.com'
  cloudFrontDefaultRootObject:
    required: true
    description: 'The CloudFront default root object. For example: index.html'
  certificateARN:
    required: true
    description: 'ARN of the certificate for the root and preview domains. For example: arn:aws:acm:us-east-1:1234567:certificate/123abc-123abc-1234-5678-abcdef'
  srcDir:
    required: true
    description: 'Path to build/out directory that contains the static files. For example: ./out'
  staticFilesGlob:
    required: true
    description: 'Glob pattern for immutable static files. For example: _next/**'
  lambdaVersion:
    required: true
    description: 'The lambda version. Required to deploy a new lambda. You must update this if changing the lambda. For example: 1.0.0'
  previewUrlTemplate:
    required: true
    description: 'The preview url template. For example: https://{branchName}.preview.example.com'
  deletePreviewSiteOnPRClose:
    required: true
    description: 'Whether to delete the preview site on PR close'
runs:
  using: 'composite'
  steps:
    - uses: actions/github-script@v5
      name: Set vars
      id: vars
      with:
        script: |
          const isPullRequest = context.eventName === 'pull_request';
          const prBranchName = isPullRequest ? context.payload.pull_request.head.ref.replace(
            /\//g,
            '-'
          ) : '';

          console.log(`::set-output name=sanitizedBranchName::${prBranchName}`);

          if (isPullRequest) {
            console.log(`::set-output name=prefix::preview/${prBranchName}`);
          } else {
            console.log(`::set-output name=prefix::root`);
          }

    - uses: badsyntax/github-action-aws-cloudformation@v0.0.2
      name: Update CloudFormation Stack
      id: update-stack
      if: github.event_name != 'pull_request' || github.event.action != 'closed'
      with:
        githubToken: ${{ inputs.gitHubToken }}
        stackName: ${{ inputs.cfStackName }}
        template: ${{ inputs.cfTemplate }}
        applyChangeSet: ${{ inputs.cfApplyChangeSet }}
        awsRegion: ${{ inputs.awsRegion }}
        parameters: |
          S3BucketName=${{ inputs.s3BucketName }}&
          S3AllowedOrigins=${{ inputs.s3AllowedOrigins }}&
          CloudFrontRootHosts=${{ inputs.cloudFrontRootHosts }}&
          CloudFrontPreviewHosts=${{ inputs.cloudFrontPreviewHosts }}&
          CertificateARN=${{ inputs.certificateARN }}&
          CloudFrontDefaultRootObject=${{ inputs.cloudFrontDefaultRootObject }}&
          LambdaVersion=${{ inputs.lambdaVersion }}

    - uses: badsyntax/github-action-aws-s3@v0.0.1
      name: Sync mutable HTML files to S3
      id: sync-html-s3
      if: github.event_name != 'pull_request' || github.event.action != 'closed'
      with:
        bucket: ${{ steps.update-stack.outputs.S3BucketName }}
        action: 'sync'
        srcDir: ${{ inputs.srcDir }}
        filesGlob: '**/*.html'
        awsRegion: ${{ inputs.awsRegion }}
        prefix: ${{ steps.vars.outputs.prefix }}
        stripExtensionGlob: '**/**.html'
        cacheControl: 'public,max-age=0,s-maxage=31536000,must-revalidate'

    - uses: badsyntax/github-action-aws-s3@v0.0.1
      name: Sync immutable files to S3
      id: sync-immutable-s3
      if: github.event_name != 'pull_request' || github.event.action != 'closed'
      with:
        bucket: ${{ steps.update-stack.outputs.S3BucketName }}
        action: 'sync'
        srcDir: ${{ inputs.srcDir }}
        filesGlob: ${{ inputs.staticFilesGlob }}
        awsRegion: ${{ inputs.awsRegion }}
        prefix: ${{ steps.vars.outputs.prefix }}
        cacheControl: 'public,max-age=31536000,immutable'

    - uses: actions/github-script@v5
      name: Set CloudFront Distribution Id
      if: github.event_name != 'pull_request' || github.event.action != 'closed'
      id: cloudfront-distribution-id
      with:
        script: |
          const { CFDistributionPreviewId, CFDistributionRootId } = process.env;
          const isPullRequest = context.eventName === 'pull_request';
          if (isPullRequest) {
            console.log(`::set-output name=distributionId::${CFDistributionPreviewId}`);
          } else {
            console.log(`::set-output name=distributionId::${CFDistributionRootId}`);
          }
      env:
        CFDistributionRootId: ${{ steps.update-stack.outputs.CFDistributionRootId }}
        CFDistributionPreviewId: ${{ steps.update-stack.outputs.CFDistributionPreviewId }}

    - uses: badsyntax/github-action-aws-cloudfront@v0.0.1
      name: Invalidate CloudFront Cache
      id: invalidate-cloudfront-cache
      if: github.event_name != 'pull_request' || github.event.action != 'closed'
      with:
        distributionId: ${{ steps.cloudfront-distribution-id.outputs.distributionId }}
        awsRegion: ${{ inputs.awsRegion }}
        originPrefix: ${{ steps.vars.outputs.prefix }}
        includeOriginPrefix: ${{ github.event_name == 'pull_request' }}
        invalidatePaths: ${{ steps.sync-html-s3.outputs.S3SyncedFiles }}
        defaultRootObject: ${{ inputs.cloudFrontDefaultRootObject }}

    - name: Find PR Comment
      uses: peter-evans/find-comment@v1
      if: github.event_name == 'pull_request' && github.event.action != 'closed'
      id: find-comment
      with:
        issue-number: ${{ github.event.number }}
        body-includes: 'Preview Site (ID: ${{ github.event.number }})'

    - name: Add/Update PR Comment
      uses: actions/github-script@v5
      if: github.event_name == 'pull_request' && github.event.action != 'closed'
      with:
        script: |
          const {
            PREVIEW_URL_TEMPLATE: previewUrlTemplate,
            SANITIZED_BRANCH_NAME: sanitizedBranchName,
            COMMENT_ID: commentId,
          } = process.env;
          const previewUrl = previewUrlTemplate.replace(
            '{branchName}',
            sanitizedBranchName
          );
          const body = `Preview Site (ID: ${context.issue.number})\n\nðŸŽ‰ Preview site deployed to: <${previewUrl}>`;
          const config = {
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body,
          };
          if (commentId) {
            await github.rest.issues.deleteComment({
              ...config,
              comment_id: commentId,
            });
          }
          await github.rest.issues.createComment(config);
      env:
        COMMENT_ID: ${{ steps.find-comment.outputs.comment-id }}
        PREVIEW_URL_TEMPLATE: ${{ inputs.previewUrlTemplate }}
        SANITIZED_BRANCH_NAME: ${{ steps.vars.outputs.sanitizedBranchName }}

    - uses: badsyntax/github-action-aws-s3@v0.0.1
      name: Delete Preview Files in S3
      id: delete-preview-files
      if: github.event_name == 'pull_request' && github.event.action == 'closed'
      with:
        bucket: ${{ steps.update-stack.outputs.S3BucketName }}
        action: 'clean'
        srcDir: ${{ inputs.srcDir }}
        filesGlob: '**/*'
        awsRegion: ${{ inputs.awsRegion }}
        prefix: ${{ steps.vars.outputs.prefix }}

    # TODO
    # - uses: badsyntax/github-action-aws-cloudfront@v0.0.1
    #   name: Invalidate CloudFront Cache
    #   id: invalidate-cloudfront-cache
    #   if: github.event_name != 'pull_request' || github.event.action != 'closed'
    #   with:
    #     distributionId: ${{ steps.cloudfront-distribution-id.outputs.distributionId }}
    #     awsRegion: ${{ inputs.awsRegion }}
    #     originPrefix: ${{ steps.vars.outputs.prefix }}
    #     includeOriginPrefix: ${{ github.event_name == 'pull_request' }}
    #     invalidatePaths: ${{ steps.sync-html-s3.outputs.S3CleanedFiles }}
    #     defaultRootObject: ${{ inputs.cloudFrontDefaultRootObject }}

    - name: Delete Preview Site Comment
      uses: actions/github-script@v5
      if: github.event_name == 'pull_request' && github.event.action == 'closed'
      with:
        script: |
          const {
            COMMENT_ID: commentId,
          } = process.env;
          const config = {
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body,
          };
          if (commentId) {
            await github.rest.issues.deleteComment({
              ...config,
              comment_id: commentId,
            });
          }
      env:
        COMMENT_ID: ${{ steps.find-comment.outputs.comment-id }}
